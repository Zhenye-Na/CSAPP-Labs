	.file	"w200-okmul.c"
	.text
	.globl	tmult_ok1
	.type	tmult_ok1, @function
/* $begin w200-tmult_ok1-s 5 */
# int tmult_ok1(long x, long y, long *dest)
# x at %rdi, y at %rsi, dest at %rdx
tmult_ok1:
	imulq	%rsi, %rdi	# Compute x * y
	movq	%rdi, (%rdx)	# Store at dest
/* $end w200-tmult_ok1-s 5 */
#APP
# 23 "w200-okmul.c" 1
/* $begin w200-tmult_ok1-s 10 */
# Code generated by asm
	setae %al		# Set low-order byte of %eax
# End of asm-generated code */
/* $end w200-tmult_ok1-s 10 */
# 0 "" 2
#NO_APP
/* $begin w200-tmult_ok1-s 13 */
	movl	$0, %eax        # Set %eax to 0 # line:asm:tmult_ok1:movl
	ret
/* $end w200-tmult_ok1-s 13 */
	.size	tmult_ok1, .-tmult_ok1
	.globl	tmult_ok2
	.type	tmult_ok2, @function
/* $begin w200-tmult_ok2-s 18 */
# int tmult_ok2(long x, long y, long *dest)
# x at %rdi, y at %rsi, dest at %rdx
tmult_ok2:
	pushq	%rbx		# Save %rbx # line:asm:tmult_ok2:pushq
	imulq	%rsi, %rdi	# Compute x * y
	movq	%rdi, (%rdx)	# Store at dest
/* $end w200-tmult_ok2-s 18 */
#APP
# 34 "w200-okmul.c" 1
/* $begin w200-tmult_ok2-s 24 */
# Code generated by asm
	setae %bl               # Set low-order byte
	movzbl %bl,%eax         # Zero extend %eax
# End of asm-generated code
/* $end w200-tmult_ok2-s 24 */
# 0 "" 2
#NO_APP
/* $begin w200-tmult_ok2-s 27 */
	popq	%rbx	        # Restore %rbx # line:asm:tmult_ok2:popq
	ret
/* $end w200-tmult_ok2-s 27 */
	.size	tmult_ok2, .-tmult_ok2
	.globl	tmult_ok3
	.type	tmult_ok3, @function
/* $begin w200-tmult_ok3-s 33 */
# int tmult_ok3(long x, long y, long *dest)
# x at %rdi, y at %rsi, dest at %rdx
tmult_ok3:
	imulq	%rsi, %rdi      # Compute x * y
	movq	%rdi, (%rdx)	# Set low-order byte
/* $end w200-tmult_ok3-s 33 */
#APP
# 51 "w200-okmul.c" 1
/* $begin w200-tmult_ok3 38 */
# Code generated by asm
	setae %al               # Zero extend %eax
# End of asm-generated code
/* $end w200-tmult_ok3 38 */
# 0 "" 2
#NO_APP
/* $begin w200-tmult_ok3 41 */
	movzbl	%al, %eax	
	ret
/* $end w200-tmult_ok3 41 */
	.size	tmult_ok3, .-tmult_ok3
	.globl	umult_ok
	.type	umult_ok, @function

/* $begin w200-umult_ok-s 59 */
# int umult_ok(unsigned long x, unsigned long y, unsigned long *dest)
# x at %rdi, y at %rsi, dest at %rdx
umult_ok:
	movq	%rdx, %rcx   # Save dest
/* $end w200-umult_ok-s 59 */
#APP
# 89 "w200-okmul.c" 1
/* $begin w200-umult_ok-s 63 */
# Code generated by asm
	movq %rdi,%rax       # Get x
	mulq %rsi            # Unsigned long multiply by y
	movq %rax,(%rcx)     # Store low-order 8 bytes at dest
	setae %dil           # Set low-order byte
# End of asm-generated code
/* $end w200-umult_ok-s 63 */
# 0 "" 2
#NO_APP
/* $begin w200-umult_ok-s 69 */
	movzbl	%dil, %eax   # Zero-extend result
	ret
/* $end w200-umult_ok-s 69 */
	.size	umult_ok, .-umult_ok
	.globl	tmult_sat
	.type	tmult_sat, @function
tmult_sat:
	movq	%rdi, %rdx
	notq	%rdx
	shrq	$63, %rdx
	movq	%rsi, %rax
	shrq	$63, %rax
	xorb	%dl, %al
	movabsq	$-9223372036854775808, %rax
	movabsq	$9223372036854775807, %rdx
	cmove	%rax, %rdx
	movq	%rdi, %rax
	imulq	%rsi, %rax
#APP
# 99 "w200-okmul.c" 1
	setae %cl            # Set result
# 0 "" 2
#NO_APP
	testb	%cl, %cl
	cmove	%rdx, %rax
	ret
	.size	tmult_sat, .-tmult_sat
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"OK"
.LC1:
	.string	"ERR"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC2:
	.string	"Signed multiply: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC3:
	.string	"%s tmult_ok_asm: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC4:
	.string	"%s tmult_ok1: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC5:
	.string	"%s tmult_ok2: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC6:
	.string	"%s tmult_ok3: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC7:
	.string	"\nUnsigned long multiply: %lu*%lu->%lu, ok = %d\n"
	.align 8
.LC8:
	.string	"%s umult_ok_asm: %lu*%lu->%lu, ok = %d\n"
	.align 8
.LC9:
	.string	"%s umult_ok: %lu*%lu->%lu, ok = %d\n"
	.text
	.globl	main
	.type	main, @function
main:
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$32, %rsp
	movl	%edi, %r12d
	movq	%rsi, %r13
	movabsq	$4294967296, %rbx
	cmpl	$1, %edi
	jle	.L11
	movq	8(%rsi), %rdi
	movl	$0, %edx
	movl	$0, %esi
	call	strtol
	movq	%rax, %rbx
.L11:
	movl	$4294967295, %ebp
	cmpl	$2, %r12d
	jle	.L12
	movq	16(%r13), %rdi
	movl	$0, %edx
	movl	$0, %esi
	call	strtol
	movq	%rax, %rbp
.L12:
	movl	$1, %r12d
	testq	%rbx, %rbx
	je	.L13
	movq	%rbx, %rax
	imulq	%rbp, %rax
	cqto
	idivq	%rbx
	cmpq	%rax, %rbp
	sete	%r12b
	movzbl	%r12b, %r12d
.L13:
	movq	%rbx, %r13
	imulq	%rbp, %r13
	movl	%r12d, %r9d
	movq	%r13, %r8
	movq	%rbp, %rcx
	movq	%rbx, %rdx
	movl	$.LC2, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok_asm
	movq	16(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L14
	cmpq	%r9, %r13
	je	.L33
.L14:
	movl	$.LC1, %edx
	jmp	.L15
.L33:
	movl	$.LC0, %edx
.L15:
	movl	%eax, (%rsp)
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC3, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok1
	movq	16(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L16
	cmpq	%r9, %r13
	je	.L34
.L16:
	movl	$.LC1, %edx
	jmp	.L17
.L34:
	movl	$.LC0, %edx
.L17:
	movl	%eax, (%rsp)
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC4, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok2
	movq	16(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L18
	cmpq	%r9, %r13
	je	.L35
.L18:
	movl	$.LC1, %edx
	jmp	.L19
.L35:
	movl	$.LC0, %edx
.L19:
	movl	%eax, (%rsp)
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC5, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok2
	movq	16(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L20
	cmpq	%r9, %r13
	je	.L36
.L20:
	movl	$.LC1, %edx
	jmp	.L21
.L36:
	movl	$.LC0, %edx
.L21:
	movl	%eax, (%rsp)
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC5, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok3
	movq	16(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L22
	cmpq	%r9, %r13
	je	.L37
.L22:
	movl	$.LC1, %edx
	jmp	.L23
.L37:
	movl	$.LC0, %edx
.L23:
	movl	%eax, (%rsp)
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC6, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movq	%rbx, %r12
	movq	%rbp, %r13
	movl	$1, %r14d
	testq	%rbx, %rbx
	je	.L24
	movq	%rbx, %rax
	imulq	%rbp, %rax
	movl	$0, %edx
	divq	%rbx
	cmpq	%rbp, %rax
	sete	%r14b
	movzbl	%r14b, %r14d
.L24:
	movq	%r12, %rbx
	imulq	%r13, %rbx
	movl	%r14d, %r9d
	movq	%rbx, %r8
	movq	%r13, %rcx
	movq	%r12, %rdx
	movl	$.LC7, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	umult_ok_asm
	movq	24(%rsp), %r9
	cmpl	%eax, %r14d
	jne	.L25
	cmpq	%r9, %rbx
	je	.L40
.L25:
	movl	$.LC1, %edx
	jmp	.L26
.L40:
	movl	$.LC0, %edx
.L26:
	movl	%eax, (%rsp)
	movq	%r13, %r8
	movq	%r12, %rcx
	movl	$.LC8, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	umult_ok
	movq	24(%rsp), %r9
	cmpl	%eax, %r14d
	jne	.L27
	cmpq	%r9, %rbx
	je	.L41
.L27:
	movl	$.LC1, %edx
	jmp	.L28
.L41:
	movl	$.LC0, %edx
.L28:
	movl	%eax, (%rsp)
	movq	%r13, %r8
	movq	%r12, %rcx
	movl	$.LC9, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	$0, %edi
	call	exit
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
