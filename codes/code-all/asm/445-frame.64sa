	.file	"445-frame.c"
	.text
	.globl	vframe
	.type	vframe, @function
/* $begin 445-frame-frags-s 5 */
# long vframe(long n, long idx, long *q)
# n in \rdireg{}, idx in \rsireg{}, q in \rdxreg{}
# Only portions of code shown
vframe:
	pushq	%rbp		       #   Save old \rbpreg{}  # line:asm:frame:saverbp
	movq	%rsp, %rbp	       #   Set frame pointer   # line:asm:frame:newrbp
	subq	$16, %rsp	       #   Allocate space for i.  (\rspreg = \ssubi)  # line:asm:frame:alloci
	leaq	22(,%rdi,8), %rax           ## line:asm:frame:allocstart
	andq	$-16, %rax   	           ## line:asm:frame:andq
	subq	%rax, %rsp	       #   Allocate space for array p (\rspreg = \ssubii)# line:asm:frame:allocdone
	leaq	7(%rsp), %rax   	       ## line:asm:frame:leaq
	shrq	$3, %rax 		       ## line:asm:frame:shrq
	leaq	0(,%rax,8), %r8        #   Set %r8 to &p[0] # line:asm:frame:findp1
	movq	%r8, %rcx              #   Set %rcx to &p[0] (\rcxreg = \(p\))# line:asm:frame:findp2
/* $end 445-frame-frags-s 5 */
	leaq	-8(%rbp), %r9
	movq	%r9, 0(,%rax,8)
	movq	$1, -8(%rbp)
	jmp	.L2
/* $begin 445-frame-frags-s 20 */
#       . . . 
# Code for initialization loop
# i in \raxreg{} and on stack, n in \rdireg{}, p in \rcxreg{}, q in \rdxreg{}
.L3:   		     	       	       # \textbf{loop:}
	movq	%rdx, (%rcx,%rax,8)    #   Set p[i] to q	# line:asm:frame:setp
	addq	$1, %rax	       #   Increment i
	movq	%rax, -8(%rbp)	       #   Store on stack	# line:asm:frame:storei
.L2:
	movq	-8(%rbp), %rax	       #   Retrieve i from stack # line:asm:frame:loadi
	cmpq	%rdi, %rax	       #   Compare i:n
	jl	.L3   		       #   If <, goto \textbf{loop}
/* $end 445-frame-frags-s 20 */
	movq	(%r8,%rsi,8), %rax
	movq	(%rax), %rax
/* $begin 445-frame-frags-s 30 */
#  	. . .   
# Code for function exit
	leave				#   Restore %rbp and %rsp # line:asm:frame:leave
	ret				#   Return
/* $end 445-frame-frags-s 30 */
	.size	vframe, .-vframe
	.globl	lframe
	.type	lframe, @function
lframe:
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	18(,%rdi,4), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	leaq	3(%rsp), %rax
	shrq	$2, %rax
	leaq	0(,%rax,4), %rcx
	movq	%rcx, %rdx
	movl	$7, 0(,%rax,4)
	movl	$1, %eax
	jmp	.L6
.L7:
	movl	$3, (%rdx,%rax,4)
	addq	$1, %rax
.L6:
	cmpq	%rdi, %rax
	jl	.L7
	movslq	(%rcx,%rsi,4), %rax
	leave
	ret
	.size	lframe, .-lframe
	.globl	main
	.type	main, @function
main:
	movl	$0, %eax
	ret
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
